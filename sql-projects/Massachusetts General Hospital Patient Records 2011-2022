-- Dataset: Massachusetts General Hospital Patient Records 2011-2022
-- Source: https://app.mavenanalytics.io/datasets
-- Queried using: MySQL Workbench

/*
ANALYZING PATIENT DEMOGRAPHICS
*/
-- What is the rate of readmissions for the hospital?
WITH readmitted_patients AS (
    SELECT
        e1.patient,
        e1.encounter_start,
        e1.encounter_stop,
        MIN(e2.encounter_start) AS readmission_date
    FROM encounters e1
    LEFT JOIN encounters e2
        ON e1.patient = e2.patient
        AND e2.encounter_start > e1.encounter_stop
        AND e2.encounter_start <= DATE_ADD(e1.encounter_stop, INTERVAL 31 DAY)
    GROUP BY
        e1.patient,
        e1.encounter_start,
        e1.encounter_stop
)
SELECT
    COUNT(*) AS total_patients,
    SUM(CASE WHEN readmission_date IS NOT NULL THEN 1 ELSE 0 END) AS readmissions,
    ROUND(SUM(CASE WHEN readmission_date IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS rate_of_readmission_within_31_days
FROM readmitted_patients;

-- What is the average number of visits per patient per year?
SELECT 
    yr, 
    ROUND(AVG(num_encounters), 2) AS average_encounters_per_patient
FROM 
    (SELECT 
        YEAR(encounter_start) AS yr,
        patient,
        COUNT(*) AS num_encounters
    FROM encounters
    WHERE YEAR(encounter_start) != 2022 -- Exclude 2022 due to incomplete data
    GROUP BY 
        yr, 
        patient) patient_encounters
GROUP BY yr
ORDER BY yr DESC;
    
-- What are the most common encounter types?
SELECT 
    encounterclass, 
    COUNT(*) AS visits
FROM encounters
GROUP BY encounterclass
ORDER BY 2 DESC;

-- Analyzing encounter frequency by patient age and sex
SELECT 
    ROUND(COUNT(CASE WHEN gender = 'F' THEN 1 END) / COUNT(*), 2) AS percentage_female,
    ROUND(COUNT(CASE WHEN gender = 'M' THEN 1 END) / COUNT(*), 2) AS percentage_male
FROM encounters
JOIN patients ON encounters.patient = patients.id;
-- Age
SELECT
    AVG(age) AS average_age
FROM (
SELECT
    TIMESTAMPDIFF(
        YEAR,
        STR_TO_DATE(patients.birthdate, '%m/%d/%Y'),
        DATE(encounters.encounter_start)) AS age
FROM encounters
JOIN patients ON encounters.patient=patients.id
) ages;

-- What are the most frequent procedures per racial group?
WITH reasons_by_race AS (
SELECT
    patients.race,
    procedures.reasondescription AS reason,
    COUNT(*) AS patient_count,
    DENSE_RANK() OVER (PARTITION BY race ORDER BY COUNT(*) DESC) AS ranking
FROM patients
JOIN procedures ON patients.id=procedures.patient
WHERE procedures.reasondescription NOT IN ('')
GROUP BY
    race,
    procedures.reasondescription
)
SELECT
    race,
    reason,
    patient_count
FROM reasons_by_race
WHERE ranking <= 2;

/*
COST ANALYSIS
*/
-- What are the average costs across different encounter types?
SELECT
    encounterclass,
    ROUND(AVG(base_encounter_cost), 2) AS average_base_cost,
    ROUND(AVG(total_claim_cost), 2) AS average_total_cost
FROM encounters
GROUP BY encounterclass
ORDER BY average_total_cost DESC;

-- Analyzing relationships between encounter duration and cost
WITH durations AS (
    SELECT
        *,
        CASE
            WHEN hour_duration BETWEEN 0 AND 4 THEN '0_4 hours'
            WHEN hour_duration BETWEEN 4 AND 24 THEN 'up_to_1_day'
            WHEN hour_duration BETWEEN 24 AND 72 THEN '1_3 days'
            WHEN hour_duration BETWEEN 72 AND 168 THEN '3_7 days'
            WHEN hour_duration BETWEEN 168 AND 720 THEN '1_4 weeks'
            WHEN hour_duration BETWEEN 720 AND 2160 THEN '1_3 months'
            WHEN hour_duration BETWEEN 2160 AND 8760 THEN '3_months_1_year'
            WHEN hour_duration > 8760 THEN '>_1_year'
            ELSE 'error'
        END AS duration
    FROM (
        SELECT
            encounterclass,
            TIMESTAMPDIFF(hour, encounter_start, encounter_stop) AS hour_duration,
            base_encounter_cost,
            total_claim_cost
        FROM
            encounters
    ) AS hours
)
SELECT
    duration,
    COUNT(*) AS encounters,
    ROUND(AVG(total_claim_cost), 2) AS average_total_cost
FROM durations
GROUP BY duration
ORDER BY average_total_cost DESC;

-- What is the average percentage of costs covered by payers?
SELECT
    ROUND(
        AVG(percent_covered)
        , 2) AS average_covered
FROM (
SELECT
    (payer_coverage / total_claim_cost) * 100  AS percent_covered
FROM encounters
) percent_payer_covers;
 -- Grouping by payers
 SELECT
    payers.name,
    ROUND(
        AVG(payer_coverage / total_claim_cost) * 100
        , 2) AS percent_covered
FROM encounters
JOIN payers ON encounters.payer=payers.id
GROUP BY payers.name
ORDER BY percent_covered DESC;
-- Grouping by encounter class
SELECT
    encounterclass,
    ROUND(
        AVG(payer_coverage / total_claim_cost) * 100
        , 2) AS percent_covered
FROM encounters
GROUP BY encounterclass
ORDER BY percent_covered DESC;

/*
PROCEDURE ANALYSIS
*/
-- What are the top 10 most common procedures?
SELECT
    procedure_descr,
    total_procedures
FROM (
    SELECT
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS ranking,
        description AS procedure_descr,
        COUNT(*) AS total_procedures
    FROM procedures
    GROUP BY procedure_descr
) ranking_procedures
WHERE ranking < 11;

-- Analyzing procedure costs by encounter type
SELECT
    encounters.encounterclass,
    ROUND(
        AVG(procedures.base_cost)
        , 2) AS average_procedure_base_cost
FROM procedures
JOIN encounters ON procedures.encounter=encounters.id
GROUP BY encounters.encounterclass
ORDER BY average_procedure_base_cost DESC;

-- What is the average duration of all procedures?
SELECT
    SEC_TO_TIME( -- converting back to readable timestamp
        AVG(
            TIMESTAMPDIFF(SECOND, procedure_start, procedure_stop) -- getting duration in seconds
        )
    ) AS average_duration
FROM procedures;

SELECT
    SEC_TO_TIME(
        AVG(
            TIMESTAMPDIFF(SECOND, procedure_start, procedure_stop)
        )
    ) AS average_duration
FROM procedures
WHERE description NOT IN ( -- removing outliers of 384 & 32 hours
    'Admission to long stay hospital', 
    'Human epidermal growth factor receptor 2 gene detection by fluorescence in situ hybridization (procedure)');
    
/*
PAYER ANALYSIS
*/
-- Which payers cover the highest percentages of costs?
SELECT
    payers.name,
    ROUND(AVG(
        encounters.payer_coverage / encounters.total_claim_cost * 100
        ), 2) AS average_percent_covered
FROM payers
JOIN encounters ON payers.id=encounters.payer
GROUP BY payers.name
ORDER BY average_percent_covered DESC;

 -- Top 3 reasons for procedures per payer
 SELECT
    insurance_provider,
    reasondescription,
    total_encounters
FROM (
    SELECT
        payers.name AS insurance_provider,
        procedures.reasondescription,
        COUNT(*) AS total_encounters,
        DENSE_RANK() OVER (PARTITION BY payers.name ORDER BY COUNT(*) DESC) AS ranking
    FROM payers
    JOIN encounters
        ON payers.id=encounters.payer
    JOIN procedures
        ON encounters.id=procedures.encounter
    WHERE procedures.reasondescription != '' -- filtering out blank descriptions
    GROUP BY
        payers.name,
        procedures.reasondescription
    ORDER BY payers.name
) description_ranks
WHERE ranking <= 2;

-- What is the gender makeup for each payer?
SELECT
    payers.name AS provider,
    ROUND(COUNT(CASE WHEN gender = 'F' THEN gender ELSE NULL END) / COUNT(*), 2) AS pct_female,
    ROUND(COUNT(CASE WHEN gender = 'M' THEN gender ELSE NULL END) / COUNT(*), 2) AS pct_male
FROM encounters
JOIN payers ON encounters.payer=payers.id
JOIN patients ON encounters.patient=patients.id
GROUP BY payers.name
ORDER BY provider;

/*
TIME-BASED ANALYSIS
*/
-- Analyze seasonal trends in encounters or procedures
SELECT
    YEAR(encounter_start) AS encounter_year,
    CASE
        WHEN MONTH(encounter_start) IN (1, 2, 3) THEN 'Q1'
        WHEN MONTH(encounter_start) IN (4, 5, 6) THEN 'Q2'
        WHEN MONTH(encounter_start) IN (7, 8, 9) THEN 'Q3'
        WHEN MONTH(encounter_start) IN (10, 11, 12) THEN 'Q4'
        ELSE 'error: check logic'
    END AS fiscal_quarter,
    COUNT(*) AS encounters,
    ROUND(
        COUNT(*) * 100.0 / 
        SUM(COUNT(*)) OVER (PARTITION BY YEAR(encounter_start)), 
        2
    ) AS pct
FROM 
    encounters
WHERE YEAR(encounter_start) != 2022 -- Exclude 2022 due to incomplete data
GROUP BY 
    encounter_year, 
    fiscal_quarter
ORDER BY 
    encounter_year DESC, 
    fiscal_quarter;
